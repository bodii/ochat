package funcs

import (
	"fmt"
	"io"
	"log"
	"ochat/bootstrap"
	"os"
	"path"
	"time"

	"github.com/skip2/go-qrcode"
)

func GetProjectDIR() string {
	dir, err := os.Getwd()

	if err != nil {
		return os.Args[0]
	}

	return dir
}

// RandFileName func
//
// param:
//   - suffix the affix of the file name to be generated.
//
// returns a file name randomly generated by suffix.
func RandFileName(suffix string) string {
	return fmt.Sprintf("%d%04d%s",
		time.Now().Unix(),
		GetUnixNanoRandSeed().Int31(),
		suffix)
}

func QrCode(url string) (*os.File, error) {
	QRCodeConf := bootstrap.SystemConf.LoginQRCode
	filename := RandFileName(".png")
	filePath := path.Join(GetProjectDIR(), QRCodeConf.FileDir, filename)
	err := qrcode.WriteFile(url, qrcode.Medium, 256, filePath)
	if err != nil {
		log.Printf(" %s create login qrcode failure\n", url)
		return nil, err
	}

	return os.Open(filePath)
}

func CopyFile(dst string, src string) error {
	// open src file
	srcFile, err := os.Open(src)
	if err != nil {
		return err
	}

	// create dst file
	dstFile, err := os.OpenFile(dst, os.O_RDWR|os.O_CREATE, os.ModePerm)
	if err != nil {
		return err
	}

	// last close files
	defer srcFile.Close()
	defer dstFile.Close()

	// copy
	_, err = io.Copy(dstFile, srcFile)

	// return
	return err
}
